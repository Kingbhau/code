

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class BFSpractice {
    private LinkedList<Integer> adjancy[];
     public BFSpractice(int v)
     {
         adjancy=new LinkedList[v];
         for (int i = 0; i < v; i++) {
             adjancy[i]=new LinkedList<>();
         }

     }
     public  void addEdges(int s,int d)
     {
         adjancy[s].add(d);
         adjancy[d].add(s);
     }
     public void bfsTraversal(int s)
     {
         boolean visited[]=new boolean[adjancy.length];
         Queue<Integer> q=new LinkedList<>();
         visited[s]=true;
         q.add(s);
         while (!q.isEmpty())
         {
             int x=q.poll();
             System.out.print(x+" ");
             for (int i = 0; i < adjancy[x].size(); i++) {
                 if(visited[adjancy[x].get(i)]==false)
                 {
                     q.add(adjancy[x].get(i));
                     visited[adjancy[x].get(i)]=true;
                 }
             }
         }
     }
    public static void main(String[] args) {
         int v,d,s,e,ee1,ee2;
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter Vertex and edges");
        v=sc.nextInt();
        e=sc.nextInt();
        BFSpractice b=new BFSpractice(v);
        for (int i = 0; i < e; i++) {
            System.out.println("Edge "+(i+1));
            ee1=sc.nextInt();
            ee2=sc.nextInt();
            b.addEdges(ee1,ee2);

        }
        System.out.println("Enter Source");
         s=sc.nextInt();
        b.bfsTraversal(s);
    }
}
