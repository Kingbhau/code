

import java.math.BigDecimal;
import java.math.BigInteger;

public class RSA{
    public static void main(String[] args) {
        int p,q,n,e,d=0,msg,z;
        double c;
        msg=15;
        p=3;
        q=11;
        n=p*q;
        z=(p-1)*(q-1);
        for ( e = 2; e < z; e++) {
            if(gcd(e,z)==1)
                break;
        }
        System.out.println("E "+e);
        for (int i = 0; i <=9 ; i++) {
            int x=1+(i*z);
            if(x%e==0)
            {
                d=x/e;
                break;
            }
        }
        System.out.println("d "+d);
        c= ((Math.pow(msg,e))%n);
        System.out.println("Encrypted Message:"+c);
        BigInteger N=BigInteger.valueOf(n);
        BigInteger C= BigDecimal.valueOf(c).toBigInteger();
        BigInteger msgBack = (C.pow(d)).mod(N);
        System.out.println("Decrypted Message: "+msgBack);

    }
    public static int gcd(int e,int z)
    {
        if(e==0)
            return z;
        else
            return gcd(z%e,e);
    }

}
